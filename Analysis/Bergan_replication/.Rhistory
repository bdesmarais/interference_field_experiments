head(expected.exp0.dem)
head(expected.exp0.rep)
head(expected.exp1.dem)
head(expected.exp1.rep)
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
head(expected.exp0.dem)
head(expected.exp0)
i <- 1
expected.exp0[i]
sum(network[i,]*zp)
expected.exp0 <- rep(0, n)
expected.exp1 <- rep(0, n)
expected.exp0.dem <- rep(0, n)
expected.exp1.dem <- rep(0, n)
expected.exp0.rep <- rep(0, n)
expected.exp1.rep <- rep(0, n)
for(p in 1:ncol(perm)){
#zp <- permute.within.categories(data$match_category,z)
zp <- perm[,p]
for(i in 1:n){
if (zp[i] == 1){
expected.exp1.dem[i] <- expected.exp1[i] + sum(network[i,]*zp*democrat)
expected.exp1.rep[i] <- expected.exp1[i] + sum(network[i,]*zp*(1-democrat))
expected.exp1[i] <- expected.exp1[i] + sum(network[i,]*zp)
}
else{
expected.exp0.dem[i] <- expected.exp0[i] + sum(network[i,]*zp*democrat)
expected.exp0.rep[i] <- expected.exp0[i] + sum(network[i,]*zp*(1-democrat))
expected.exp0[i] <- expected.exp0[i] + sum(network[i,]*zp)
}
}
}
num_treat <- apply(perm,1,sum)
num_control <- apply(1-perm,1,sum)
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
head(expected.exp0)
rm(list=ls())
gc()
set.seed(132)
## Packages
dir.create(Sys.getenv("R_LIBS_USER"), showWarnings = FALSE, recursive = TRUE)
install.packages("iterators", Sys.getenv("R_LIBS_USER"), repos = "https://cran.cnr.berkeley.edu/")
rm(list=ls())
gc()
set.seed(132)
library(doParallel)
library(foreach)
library(foreign)
library(kSamples)
library(network)
library(permute)
## Functions
permute.within.categories <- function(categories,z){
ucategories <- unique(categories)
perm.z <- rep(NA,length(z))
for(c in ucategories){
z.c <- z[which(categories==c)]
perm.z.c <- sample(z.c,length(z.c),rep=F)
perm.z[which(categories==c)] <- perm.z.c
}
perm.z
}
matrix.max <- function(x){
# x is the matrix with respect to which you want to find the max cell
rowmax <- which.max(apply(x,1,max))
colmax <- which.max(x[rowmax,])
c(rowmax,colmax)
}
get.similarity <- function(x, y){
return((2-abs(x-y))/2)
}
## Importing data
data <- read.dta("bergan.dta", convert.underscore=TRUE)
data <- data[1:148,]
# Fixing the adjacency matrix
load("cosponsorship_network.RData")
network <- cosponsorship_network[rownames(cosponsorship_network)[is.na(match(rownames(cosponsorship_network),
data$name))==FALSE],
rownames(cosponsorship_network)[is.na(match(rownames(cosponsorship_network),
data$name))==FALSE]]
rm(cosponsorship_network)
gc()
## Cleaning it up
network <- network[-which(data$finalvote < 0), -which(data$finalvote < 0)]
data <- data[-which(data$finalvote < 0), ]
## Setting treatment and outcome vector
y.z <- data$finalvote
z <- data$anytreat
perms <- 1#0000 #number of permutations to use in generating expected exposure
perms.test <- 1#000 #number of permutations used in testing
n <- length(z)
democrat <- data$democrat
#### Generate expected exposure
perm <- replicate(perms, permute.within.categories(data$strata,z))
expected.exp0 <- rep(0, n)
expected.exp1 <- rep(0, n)
expected.exp0.dem <- rep(0, n)
expected.exp1.dem <- rep(0, n)
expected.exp0.rep <- rep(0, n)
expected.exp1.rep <- rep(0, n)
for(p in 1:ncol(perm)){
#zp <- permute.within.categories(data$match_category,z)
zp <- perm[,p]
for(i in 1:n){
if (zp[i] == 1){
expected.exp1[i] <- expected.exp1[i] + sum(network[i,]*zp)
expected.exp1.dem[i] <- expected.exp1.dem[i] + sum(network[i,]*zp*democrat)
expected.exp1.rep[i] <- expected.exp1.rep[i] + sum(network[i,]*zp*(1-democrat))
}
else{
expected.exp0[i] <- expected.exp0[i] + sum(network[i,]*zp)
expected.exp0.dem[i] <- expected.exp0.dem[i] + sum(network[i,]*zp*democrat)
expected.exp0.rep[i] <- expected.exp0.rep[i] + sum(network[i,]*zp*(1-democrat))
}
}
}
table(num_treat)
num_treat <- apply(perm,1,sum)
num_control <- apply(1-perm,1,sum)
table(num_treat)
table(num_control)
n
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
head(expected.exp0.rep)
blah <- na.omit(expected.exp0.rep)
head(blah)
blah <- na.action(expected.exp0.rep)
head(blah)
?na.action
expected.exp0.dem[is.nan(expected.exp0.dem)] <- 0
head(expected.exp0.rep)
blah <- replace(expected.exp0.dem, is.na(expected.exp0.dem), 0)
head(blah)
expected.exp0 <- rep(0, n)
expected.exp1 <- rep(0, n)
expected.exp0.dem <- rep(0, n)
expected.exp1.dem <- rep(0, n)
expected.exp0.rep <- rep(0, n)
expected.exp1.rep <- rep(0, n)
for(p in 1:ncol(perm)){
#zp <- permute.within.categories(data$match_category,z)
zp <- perm[,p]
for(i in 1:n){
if (zp[i] == 1){
expected.exp1[i] <- expected.exp1[i] + sum(network[i,]*zp)
expected.exp1.dem[i] <- expected.exp1.dem[i] + sum(network[i,]*zp*democrat)
expected.exp1.rep[i] <- expected.exp1.rep[i] + sum(network[i,]*zp*(1-democrat))
}
else{
expected.exp0[i] <- expected.exp0[i] + sum(network[i,]*zp)
expected.exp0.dem[i] <- expected.exp0.dem[i] + sum(network[i,]*zp*democrat)
expected.exp0.rep[i] <- expected.exp0.rep[i] + sum(network[i,]*zp*(1-democrat))
}
}
}
num_treat <- apply(perm,1,sum)
num_control <- apply(1-perm,1,sum)
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
table(is.nan(expected.exp0.dem))
table(is.nan(expected.exp0.rep))
expected.exp0.rep[is.nan(expected.exp0.rep)] <- NA
View(expected.exp0.rep)
expected.exp0.dem[is.nan(expected.exp0.rep)] <- 0
expected.exp0.dem[is.nan(expected.exp0.dem)] <- 0
View(expected.exp0.dem)
View(expected.exp1.rep)
expected.exp1.rep[is.nan(expected.exp1.rep)] <- NA
View(expected.exp1.rep)
sum(expected.exp1.dem)
expected.exp0 <- rep(0, n)
expected.exp1 <- rep(0, n)
expected.exp0.dem <- rep(0, n)
expected.exp1.dem <- rep(0, n)
expected.exp0.rep <- rep(0, n)
expected.exp1.rep <- rep(0, n)
for(p in 1:ncol(perm)){
#zp <- permute.within.categories(data$match_category,z)
zp <- perm[,p]
for(i in 1:n){
if (zp[i] == 1){
expected.exp1[i] <- expected.exp1[i] + sum(network[i,]*zp)
expected.exp1.dem[i] <- expected.exp1.dem[i] + sum(network[i,]*zp*democrat)
expected.exp1.rep[i] <- expected.exp1.rep[i] + sum(network[i,]*zp*(1-democrat))
}
else{
expected.exp0[i] <- expected.exp0[i] + sum(network[i,]*zp)
expected.exp0.dem[i] <- expected.exp0.dem[i] + sum(network[i,]*zp*democrat)
expected.exp0.rep[i] <- expected.exp0.rep[i] + sum(network[i,]*zp*(1-democrat))
}
}
}
num_treat <- apply(perm,1,sum)
num_control <- apply(1-perm,1,sum)
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
for(i in 1:n){
if(num_control[i] == 0){
expected.exp0[i] <- 0
expected.exp0.dem[i] <- 0
expected.exp0.rep[i] <- 0
} else {
expected.exp1[i] <- 0
expected.exp1.dem[i] <- 0
expected.exp1.rep[i] <- 0
}
}
expected.exp0 <- rep(0, n)
expected.exp1 <- rep(0, n)
expected.exp0.dem <- rep(0, n)
expected.exp1.dem <- rep(0, n)
expected.exp0.rep <- rep(0, n)
expected.exp1.rep <- rep(0, n)
for(p in 1:ncol(perm)){
#zp <- permute.within.categories(data$match_category,z)
zp <- perm[,p]
for(i in 1:n){
if (zp[i] == 1){
expected.exp1[i] <- expected.exp1[i] + sum(network[i,]*zp)
expected.exp1.dem[i] <- expected.exp1.dem[i] + sum(network[i,]*zp*democrat)
expected.exp1.rep[i] <- expected.exp1.rep[i] + sum(network[i,]*zp*(1-democrat))
}
else{
expected.exp0[i] <- expected.exp0[i] + sum(network[i,]*zp)
expected.exp0.dem[i] <- expected.exp0.dem[i] + sum(network[i,]*zp*democrat)
expected.exp0.rep[i] <- expected.exp0.rep[i] + sum(network[i,]*zp*(1-democrat))
}
}
}
num_treat <- apply(perm,1,sum)
num_control <- apply(1-perm,1,sum)
expected.exp1 <- expected.exp1/num_treat
expected.exp0 <- expected.exp0/num_control
expected.exp1.dem <- expected.exp1.dem/num_treat
expected.exp0.dem <- expected.exp0.dem/num_control
expected.exp1.rep <- expected.exp1.rep/num_treat
expected.exp0.rep <- expected.exp0.rep/num_control
for(i in 1:n){
if(num_control[i] == 0){
expected.exp0[i] <- 0
expected.exp0.dem[i] <- 0
expected.exp0.rep[i] <- 0
} else {
expected.exp1[i] <- 0
expected.exp1.dem[i] <- 0
expected.exp1.rep[i] <- 0
}
}
indirect.treatment <- function(permutation, adj.mat, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat){
#any treatment assignment vector and adjacency matrix can be used
# permutation: can be the initial treatment assignment or a permutation
#for (i in 1:n){
# raw.exp[i] <- sum(adj.mat[i,]*permutation)
# }
raw.exp.dem <- c(adj.mat%*%(permutation*democrat))
raw.exp.rep <- c(adj.mat%*%(permutation*(1-democrat)))
net.exp.dem <- raw.exp.dem - (permutation*expected.exp1.dem + (1-permutation)*expected.exp0.dem)
net.exp.rep <- raw.exp.rep - (permutation*expected.exp1.rep + (1-permutation)*expected.exp0.rep)
standard.exp.dem <- (net.exp.dem - mean(net.exp.dem))/sd(net.exp.dem) #this is the spillover or indirect effect
standard.exp.rep <- (net.exp.rep - mean(net.exp.rep))/sd(net.exp.rep) #this is the spillover or indirect effect
return(list(standard.exp.dem, standard.exp.rep, raw.exp.dem, raw.exp.rep))
}
z.to.unif <- function(outcome, beta1, beta2, beta3, beta4, permutation, adj.mat, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat){
# outcome: vector of direct treatment outcomes
# beta1: direct treatment effect parameter
# beta2: indirect treatment effect parameter
# permutation: vector of a permutation of z (can be z itself)
# adj.mat: adjacency matrix
exposures <- indirect.treatment(permutation, adj.mat, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat)
exposure_dem <- exposures[[1]]
exposure_rep <- exposures[[2]]
# This is equation 5
h.yz.0 <- outcome - (beta1*permutation*democrat) - (beta2*permutation*(1-democrat)) - (beta3*exposure_dem) - (beta4*exposure_rep)
return(h.yz.0)
}
beta1s <- c(seq(from=-0.5, to=0.5, by=.1))
beta2s <- c(seq(from=-0.5, to=0.5, by=.1))
beta3s <- c(seq(from=-0.5, to=0.5, by=.1))
beta4s <- c(seq(from=-0.5, to=0.5, by=.1))
parameters <- expand.grid(beta1s, beta2s, beta3s, beta4s)
pvals <- numeric(nrow(parameters))
exposures <- indirect.treatment(permutation = z, adj.mat = network, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat)
test.stat <- sum((lm(y.z ~ eval(z*democrat) + eval(z*(1-democrat)) +
exposures[[1]] + exposures[[2]],
na.action = na.omit)$resid)^2)
pval <- numeric(nrow(parameters))
registerDoParallel(cores = 20)
BFP.results <- foreach(i=1:nrow(parameters)) %dopar% {
perm.y.0 <- z.to.unif(outcome=y.z, beta1=parameters[i,1], beta2=parameters[i,2], beta3=parameters[i,3], beta4=parameters[i,4], permutation=z, adj.mat=network, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat)
#perm.y.0 <- z.to.unif(outcome = y.z, beta1 = beta1s[i], beta2 = beta2s[j], permutation = z, adj.mat = network)
# Calculate a vector of test statistic using permutations
beta1 <- parameters[i,1]
beta2 <- parameters[i,2]
beta3 <- parameters[i,3]
beta4 <- parameters[i,4]
perm.test.stats <- numeric(perms.test)
for(k in 1:perms.test){
#perm.z <- Z_block[,sample(1:10000, 1)]
perm.z <- perm[,sample(1:perms, 1)]
perm.exposure <- indirect.treatment(permutation = perm.z, adj.mat = network, expected.exp0.dem, expected.exp1.dem, expected.exp0.rep, expected.exp1.rep, democrat)
exposure_dem <- perm.exposure[[3]]
exposure_rep <- perm.exposure[[4]]
y.sim <- perm.y.0 + beta1*perm.z*democrat + beta2*perm.z*(1-democrat) + beta3*exposure_dem + beta4*exposure_rep
perm.test.stats[k] <- sum((lm(y.sim ~ eval(perm.z*democrat) + eval(perm.z*(1-democrat)) + exposure_dem + exposure_rep , na.action = na.omit)$resid)^2)
}
# Calculating p-value
c(sum(perm.test.stats < test.stat)/perms.test,1)
}
stopImplicitCluster()
rm(list=ls())
gc()
set.seed(312)
##
## Setup
##
library(foreign)
data <- read.csv("bergan_data.csv", header = TRUE)
data <- data[1:148, ]
## Cohort and coparty network
cohort_copart_amat <- matrix(NA, nrow(data), nrow(data))
# Fixing the adjacency matrix
load("cohort_copart_network.RData")
network <- cohort_copart_amat
sum(network)
rm(list=ls())
gc()
set.seed(312)
##
## Setup
##
library(foreign)
data <- read.csv("bergan_data.csv", header = TRUE)
data <- data[1:148, ]
## Cohort and coparty network
cohort_copart_amat <- matrix(NA, nrow(data), nrow(data))
for (i in 1:nrow(data)){
for (j in 1:nrow(data)){
if (data$cohort[i] == data$cohort[j] && data$democrat[i] == data$democrat[j] && data$senate[i] == data$senate[j]){
cohort_copart_amat[i,j] <- 1
} else {
cohort_copart_amat[i,j] <- 0
}
}
}
save(cohort_copart_amat, file = "cohort_copart_network.RData")
## Weighted cohort and coparty network
w_cohort_copart_amat <- matrix(NA, nrow(data), nrow(data))
for (i in 1:nrow(data)){
for (j in 1:nrow(data)){
if (data$democrat[i] == data$democrat[j] && data$senate[i] == data$senate[j]){
w_cohort_copart_amat[i,j] <- 1/(1+(abs(data$cohort[i] - data$cohort[j])))
} else {
w_cohort_copart_amat[i,j] <- 0
}
}
}
save(w_cohort_copart_amat, file = "w_cohort_copart_network.RData")
# read in results
load("BerganSPPQRRresults_copartisan_cohort_binary.RData")
copartisan_cohort_binary_results <- do.call('rbind',BFP.results)[,1]
load("BerganSPPQRRresults_copartisan_cohort_similarity.RData")
copartisan_cohort_weighted_results <- do.call('rbind',BFP.results)[,1]
rm(list=ls())
# read in results
load("BerganSPPQRRresults_copartisan_cohort_binary.RData")
copartisan_cohort_binary_results <- do.call('rbind',BFP.results)[,1]
load("BerganSPPQRRresults_copartisan_cohort_similarity.RData")
copartisan_cohort_weighted_results <- do.call('rbind',BFP.results)[,1]
load("BerganSPPQRRresults_cospon_binary_newmodel.RData")
copartisan_cosponsorship_binary_results <- do.call('rbind',BFP.results)[,1]
load("BerganSPPQRRresults_cospon_weighted_newmodel.RData")
copartisan_cosponsorship_weighted_results <- do.call('rbind',BFP.results)[,1]
BFP.results.summary <- function(parameters,p.values,level=0.95){
threshold <- 1-level
estimate <- as.numeric(parameters[which.max(p.values),])
CIs <- NULL
for(p in 1:ncol(parameters)){
select.col <- 0
for(c in (1:ncol(parameters))[-p]){
select.col <- select.col + 1*(parameters[,c]==estimate[c])
}
select.col <- which(select.col==(ncol(parameters)-1))
parameters.p <- parameters[select.col,p]
p.values.p <- p.values[select.col]
parameters.p <- parameters.p[which(p.values.p>threshold)]
CIs <- rbind(CIs,c(min(parameters.p),max(parameters.p)))
}
list(estimate,CIs)
}
summary.copartisan_cohort_binary <- BFP.results.summary(parameters,copartisan_cohort_binary_results)
summary.copartisan_cohort_weighted <- BFP.results.summary(parameters,copartisan_cohort_weighted_results)
summary.copartisan_cospon_binary <- BFP.results.summary(parameters,copartisan_cosponsorship_binary_results)
summary.copartisan_cospon_weighted <- BFP.results.summary(parameters,copartisan_cosponsorship_weighted_results)
summary.copartisan_cospon_binary
BFP.results.summary <- function(parameters,p.values,level=0.90){
threshold <- 1-level
estimate <- as.numeric(parameters[which.max(p.values),])
CIs <- NULL
for(p in 1:ncol(parameters)){
select.col <- 0
for(c in (1:ncol(parameters))[-p]){
select.col <- select.col + 1*(parameters[,c]==estimate[c])
}
select.col <- which(select.col==(ncol(parameters)-1))
parameters.p <- parameters[select.col,p]
p.values.p <- p.values[select.col]
parameters.p <- parameters.p[which(p.values.p>threshold)]
CIs <- rbind(CIs,c(min(parameters.p),max(parameters.p)))
}
list(estimate,CIs)
}
summary.copartisan_cospon_binary <- BFP.results.summary(parameters,copartisan_cosponsorship_binary_results)
summary.copartisan_cospon_binary
summary.copartisan_cospon_weighted
summary.copartisan_cospon_weighted <- BFP.results.summary(parameters,copartisan_cosponsorship_weighted_results)
summary.copartisan_cospon_weighted
all_parameters <- NULL
copartisan_cohort_binary_results <- NULL
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary1.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary2.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary3.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary4.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary5.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary6.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary7.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary8.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary9.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary10.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary11.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary12.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary13.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary14.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary15.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
load("BerganSPPQRRresults_copartisan_cohort_chamber_binary16.RData")
copartisan_cohort_binary_results <- c(copartisan_cohort_binary_results,do.call('rbind',BFP.results)[,1])
all_parameters <- rbind(all_parameters,parameters)
parameters <- all_parameters
BFP.results.summary <- function(parameters,p.values,level=0.95){
threshold <- 1-level
estimate <- as.numeric(parameters[which.max(p.values),])
CIs <- NULL
for(p in 1:ncol(parameters)){
select.col <- 0
for(c in (1:ncol(parameters))[-p]){
select.col <- select.col + 1*(parameters[,c]==estimate[c])
}
select.col <- which(select.col==(ncol(parameters)-1))
parameters.p <- parameters[select.col,p]
p.values.p <- p.values[select.col]
parameters.p <- parameters.p[which(p.values.p>threshold)]
CIs <- rbind(CIs,c(min(parameters.p),max(parameters.p)))
}
list(estimate,CIs)
}
summary.copartisan_cohort_binary <- BFP.results.summary(parameters,copartisan_cohort_binary_results)
summary.copartisan_cohort_binary.9 <- BFP.results.summary(parameters,copartisan_cohort_binary_results,level=0.9)
library(xtable)
cohort.table <- cbind(summary.copartisan_cohort_binary[[1]],summary.copartisan_cohort_binary[[2]],summary.copartisan_cohort_binary.9[[2]])
xtable(cohort.table)
